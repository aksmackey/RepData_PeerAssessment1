library(datasets)
data(iris)
s<-split(iris, iris$Species)
class(s)
s<-split(iris, iris$Species, simplify2array)
s<-split(iris, iris$Species, simplify2array=TRUE)
s<-split(iris, iris$Species, simiplify = TRUE)
s<-data.frame(split(iris, iris$Species))
class(s)
lapply(s, function(x) colMeans(x[,c("virginica")]))
lapply(s, function(x) colMeans(x[,"virginica"]))
colnames(s)
lapply(s, function(x) colMeans(x[,c("virginica", "setosa", "versicolor")]
))
s
s<- data.frame(split(iris, iris$Species))
s
iris
s<-split(iris, iris$Species)
s
lapply(s, function(x) colMeans(x[,"Sepal.Length"]))
class(s)
s
s <- data.frame(split(iris, iris$Species))
colnames(s0)
colnames(s)
lapply(s, funciton(x) colMeans(x[,"virginica.Sepal.Length"]))
lapply(s, function(x) colMeans(x[,c("virginica.Sepal.Length")]))
dataset(airquality)
data(airquality)
s<-split(airquality, airquality$Month)
f<-function(x) colMeans(x[,c("Ozone", "Solar.R", "Wind")])
lapply(s, f)
s<-split(iris, iris$Species)
?iris
f<-function(x) colMeans(x[,"Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width")])
f<-function(x) colMeans(x[,c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width")])
lapply(s,f)
colMeans(iris)
apply(iris, 1, mean)
apply(iris[,1:4], 2, mean)
data(mtcars)
?mtcars
tapply(mtcars$cyl, mtcars$mpg, mean)
apply(mtcars, 2, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
git
git init
?git
git init
?solve
m<-matrix(1:6, nrow=2 ncol=3)
m<-matrix(1:6, nrow=2, ncol=3)
g<-solve(m)
m<-matrix(1:9, nrow=3, ncol=3)
m
g<-solve(m)
g
m<-matrix(10:19, nrow=3, ncol=3)
m
m<-matrix(11:19, nrow=3, ncol=3)
m
det(m)
?det
solve(m)
q<-(3,5,6)
q<-3,5,6
q<-vector(3,5,6)
q<-c(2,5,6)
w<-c(3,1,6)
x<-c(5,2,4)
e<-cbind(q,w)
e
e<-cbind(e,x)
e
det(e)
solve(e)
f<-matrix(c(1,2,3,4), nrow=2, ncol=2)
f
solve(f)
source('~/cachematrix.R')
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
cacheSolve((amatrix))
amatrix = makeCacheMatrix(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve((amatrix))
amatrix$getinverse()
source('~/cachematrix.R')
library(XML)
install.packages(GET)
install.packages("GET")
install.packages("jsonlite")
install.packages("httpuv")
install.packages("httr")
gitapi <- oauth_app("github", key="bbeaef7b072278d160d4", secret="032b0b41632e7a6e8dc74bcdade293084ae13f9d")
library(jsonlite)
library(httr)
library(httpuv)
gitapi <- oauth_app("github", key="bbeaef7b072278d160d4", secret="032b0b41632e7a6e8dc74bcdade293084ae13f9d")
github_token <- oauth2.0_token(oauth_endpoints("github"), gitapi, cache = FALSE)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
page <- GET("https://api.github.com/users/jtleek/repos", gtoken)
head(page)
names(page)
head(page[7])
pagecont <- content(page, as="text")
parCont <- htmlParse(pagecont, asText=TRUE)
xpathSApply(parCont, "//date", xmlValue)
head(parCont)
names(parCont)
parCont
rootnode <- xmlRoot(parCont)
xpathSApply(rootnode, "//name", xmlValue)
rootnames <- xpathSApply(rootnode, "//name", xmlValue)
rootnames
head(rootnode)
hubnames <- xpathSApply(parCont, "//class=name", xmlValue)
hubnames
xpathSApply(parCont, "//id")
xpathSApply(parCont, "//[@name='datasharing']", xmlValue)
?xpathSApply
xpathSApply(parCont, "//@name='datasharing'", xmlValue)
xpathSApply(parCont, "/[@name='datasharing']", xmlValue)
xpathSApply(parCont, "/@name='datasharing'", xmlValue)
head(parCont)
parCont
url <- GET("https://api.github.com/users/jtleek/repos", gtoken)
html <- htmlTreeParse(url, useInternalNodes = T)
xpathSApply(html, "//name", xmlValue)
content3 <- content(url, as = "text")
parsedHtml <- htmlTreeParse(content3, asText=TRUE)
xpathSApply(parsedHtml, "//name", xmlValue)
parsedHtml <- htmlParse(content3, asText=TRUE)
xpathSApply(parsedHtml, "//name", xmlValue)
cheese <- xpathSApply(parsedHtml, "//name", xmlValue)
cheese
parsedHtml
xpathSApply(parsedHtml, "//created_at", xmlValue)
getdirect <- GET("https://api.github.com/users/jtleek/repos", gtoken)
json1 <- content(getdirect)
json2 <- jsonlite::fromJSON(toJSON(json1))
print json2['name' == 'datasharing']
print(json2('name' == 'datasharing'))
library(data.table)
DF <- data.table(json1)
head(DF)
head(json1)
head(DF)
DF
names(parsedHtml)
closeAllConnections()
oauth_endpoints("github")
install.packages("swirl")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
swirl()
blah <- [1, 2, 3, 'NA']
blah <- c(1, 2, 3, "NA", 4, 5, "NA")
is.na(blah)
sum(is.na(blah))
blah <- c(1,2,3,NA,4,5,NA)
sum(is.na(blah))
activ = read.csv("activity.csv", na.strings = "NA")
setwd("/Users/landonmackey2/documents/coursera/datasciencecoursera/reproresch/RepData_PeerAssessment1")
activ = read.csv("activity.csv", na.strings = "NA")
unzip('activity.zip')
activ = read.csv("activity.csv", na.strings = "NA")
grp <- group_by(activ, date)
library(dplyr)
grp <- group_by(activ, date)
tapply(activ$steps, activ$date, function(x) {c(mean(x), median(x))})
tapply(activ$steps, activ$date, function(x) {c(mean(x, na.rm=TRUE), median(x,na.rm=TRUE))})
mmday <- tapply(activ$steps, activ$date, function(x) {c(mean(x, na.rm=TRUE), median(x,na.rm=TRUE))})
cbind(day = unique(active$steps), do.call(rbind, mmday))
datatable(mmday)
table(mmday)
mmday
str(mmday)
head(mmday)
data.frame(mmday)
